class Tomato:

    #созревание
    states = {0: "Ничего", 1: "растёт", 2: "Зелёный томат", 3: "Красный томат" }
    def __init__(self, index):
        self._index = index
        self._state = 0

      #след.стадия
    def grow(self):
        self._change_state()

    #созрел ли томат

    def is_ripe(self):
        if self._state == 3:
            return True
        return False

    def _change_state(self):
        if self._state < 3:
            self._state += 1
        self._print_state()

    def _print_state(self):
        print(f"Томат {self._index} в {Tomato.states[self._state]}")


class TomatoBush:
    def __init__(self, num):
        self.tomatoes = [Tomato(index) for index in range(0,num)]

    def grow_all(self):
        for tomato in self.tomatoes:
            tomato.grow()

    def all_are_ripe(self):
        return all([tomato.is_ripe() for tomato in self.tomatoes])

    def give_away_all(self):
        self.tomtoes = []

class Gardener:
    def __init__(self,name,plant):
        self.name = name
        self._plant = plant

    def work(self):
        print("Садовник убирвет урожай...")
        self._plant.grow_all()
        print("Садовник закончил")

    def harvest(self):
        print("Садовник собирает урожай")
        if self._plant.all_are_ripe():
            self._plant.give_away_all()
            print("Садовник закночил")
        else:
            print("Собирать слишком рано! Растение ещё зеленое и не созрело")


    #справка
    @staticmethod
    def knowledge_base():
        print("Собирать томаты можно, когда плоды становятся зелёными,а затем им дают созреть на лозе")

if __name__ == "__main__":
    Gardener.knowledge_base()
    great_tomato_bush = TomatoBush(4)
    gardener = Gardener("Иван", great_tomato_bush)
    gardener.work()
    gardener.work()
    gardener.harvest()
    gardener.work()
    gardener.harvest()
